//----------------------------------------------------------------------------------------------------
// <auto-generated>
//
//		This code was automatically generated by the LeanFT Application Model code generator.
//
//		Changes to this file may cause incorrect behavior and will be lost 
//		when the code is regenerated.
//
// </auto-generated>
//----------------------------------------------------------------------------------------------------
using System;
using HP.LFT.SDK;  
using System.Collections.Generic;

namespace LeanFtSampleProject
{
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("This class is automatically generated by the LeanFT Application Model code generator.", "12.5.0.0")]
	public class MagentoCommerce : AppModelBase
	{
		#region Constructors

		public MagentoCommerce(ITestObject contextTestObject)
		{
			MadisonIslandPage = new MadisonIslandPageNode(contextTestObject, this);
			RebuildDescriptions();
			Name = @"MagentoCommerce";
		}

		#endregion

		#region Test Objects
	
		public MadisonIslandPageNode MadisonIslandPage { get; private set; }
	
		#endregion
	
		#region Inner Classes
	
		public sealed class MadisonIslandPageNode : PageNodeBase
		{
			#region Constructors
		
			public MadisonIslandPageNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				QEditField = new QEditFieldNode(this, applicationModel);
				SearchButton = new SearchButtonNode(this, applicationModel);
				DisplayName = @"Madison Island";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.PageDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.PageDescription();
			}
		
			#endregion
		
			#region Test Objects
		
			public QEditFieldNode QEditField { get; private set; }
			public SearchButtonNode SearchButton { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class QEditFieldNode : EditFieldNodeBase
			{
				#region Constructors
			
				public QEditFieldNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"q";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.EditFieldDescription
					{
						Type = @"search",
						TagName = @"INPUT",
						Name = @"q"
					};
				}
			
				#endregion
			
			}

			public sealed class SearchButtonNode : ButtonNodeBase
			{
				#region Constructors
			
				public SearchButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Search";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.ButtonDescription
					{
						ButtonType = @"submit",
						TagName = @"BUTTON",
						Name = @"Search"
					};
				}
			
				#endregion
			
			}

			#endregion
		}

		#endregion

		#region Base Classes

		public abstract class ButtonNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.IButton, HP.LFT.SDK.Web.ButtonDescription>, HP.LFT.SDK.Web.IButton
		{
			public ButtonNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void FireEvent(HP.LFT.SDK.Web.EventInfo eventInfo)
			{
				ExecuteWithEvents(()=>Concrete.FireEvent(eventInfo));
			}
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
			public bool Exists()
			{
				return Concrete.Exists();
			}
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
			public void Highlight()
			{
				ExecuteWithEvents(()=>Concrete.Highlight());
			}
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				ExecuteWithEvents(()=>Concrete.Click(button));
			}
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				ExecuteWithEvents(()=>Concrete.Click(args));
			}
			public string GetAttribute(string attributeName)
			{
				return Concrete.GetAttribute(attributeName);
			}
			public string GetComputedStyle(string styleProperty)
			{
				return Concrete.GetComputedStyle(styleProperty);
			}
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				ExecuteWithEvents(()=>Concrete.DragAndDropOn(dropTarget));
			}
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				ExecuteWithEvents(()=>Concrete.DragAndDropOn(dropTarget, dragAndDropArgs));
			}
		#endregion
	
			#region Public Properties
	
			public string ButtonType
			{
				get { return Concrete.ButtonType; }		
			}
	
			public bool IsEnabled
			{
				get { return Concrete.IsEnabled; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public string XPath
			{
				get { return Concrete.XPath; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Id
			{
				get { return Concrete.Id; }		
			}
	
			public string TagName
			{
				get { return Concrete.TagName; }		
			}
	
			public string InnerHTML
			{
				get { return Concrete.InnerHTML; }		
			}
	
			public string OuterHTML
			{
				get { return Concrete.OuterHTML; }		
			}
	
			public string InnerText
			{
				get { return Concrete.InnerText; }		
			}
	
			public string OuterText
			{
				get { return Concrete.OuterText; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Attributes
			{
				get { return Concrete.Attributes; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Styles
			{
				get { return Concrete.Styles; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			#endregion
		}

		public abstract class EditFieldNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.IEditField, HP.LFT.SDK.Web.EditFieldDescription>, HP.LFT.SDK.Web.IEditField
		{
			public EditFieldNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void SetSecure(string encryptedText)
			{
				ExecuteWithEvents(()=>Concrete.SetSecure(encryptedText));
			}
			public void SetValue(string text)
			{
				ExecuteWithEvents(()=>Concrete.SetValue(text));
			}
			public void FireEvent(HP.LFT.SDK.Web.EventInfo eventInfo)
			{
				ExecuteWithEvents(()=>Concrete.FireEvent(eventInfo));
			}
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
			public bool Exists()
			{
				return Concrete.Exists();
			}
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
			public void Highlight()
			{
				ExecuteWithEvents(()=>Concrete.Highlight());
			}
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				ExecuteWithEvents(()=>Concrete.Click(button));
			}
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				ExecuteWithEvents(()=>Concrete.Click(args));
			}
			public string GetAttribute(string attributeName)
			{
				return Concrete.GetAttribute(attributeName);
			}
			public string GetComputedStyle(string styleProperty)
			{
				return Concrete.GetComputedStyle(styleProperty);
			}
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				ExecuteWithEvents(()=>Concrete.DragAndDropOn(dropTarget));
			}
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				ExecuteWithEvents(()=>Concrete.DragAndDropOn(dropTarget, dragAndDropArgs));
			}
		#endregion
	
			#region Public Properties
	
			public string DefaultValue
			{
				get { return Concrete.DefaultValue; }		
			}
	
			public int MaxLength
			{
				get { return Concrete.MaxLength; }		
			}
	
			public string Pattern
			{
				get { return Concrete.Pattern; }		
			}
	
			public uint RowsCount
			{
				get { return Concrete.RowsCount; }		
			}
	
			public string Type
			{
				get { return Concrete.Type; }		
			}
	
			public string Value
			{
				get { return Concrete.Value; }		
			}
	
			public bool IsReadOnly
			{
				get { return Concrete.IsReadOnly; }		
			}
	
			public bool IsRequired
			{
				get { return Concrete.IsRequired; }		
			}
	
			public uint MaxCharsInLine
			{
				get { return Concrete.MaxCharsInLine; }		
			}
	
			public string XPath
			{
				get { return Concrete.XPath; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Id
			{
				get { return Concrete.Id; }		
			}
	
			public string TagName
			{
				get { return Concrete.TagName; }		
			}
	
			public string InnerHTML
			{
				get { return Concrete.InnerHTML; }		
			}
	
			public string OuterHTML
			{
				get { return Concrete.OuterHTML; }		
			}
	
			public string InnerText
			{
				get { return Concrete.InnerText; }		
			}
	
			public string OuterText
			{
				get { return Concrete.OuterText; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Attributes
			{
				get { return Concrete.Attributes; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Styles
			{
				get { return Concrete.Styles; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			#endregion
		}

		public abstract class PageNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.IPage, HP.LFT.SDK.Web.PageDescription>, HP.LFT.SDK.Web.IPage
		{
			public PageNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public TResult RunJavaScript<TResult>(string scriptToRun)  where TResult:struct
			{
				return Concrete.RunJavaScript<TResult>(scriptToRun);
			}
			public string RunJavaScript(string scriptToRun)
			{
				return Concrete.RunJavaScript(scriptToRun);
			}
			public void Sync()
			{
				ExecuteWithEvents(()=>Concrete.Sync());
			}
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
			public bool Exists()
			{
				return Concrete.Exists();
			}
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
			public void Highlight()
			{
				ExecuteWithEvents(()=>Concrete.Highlight());
			}
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
		#endregion
	
			#region Public Properties
	
			public string Url
			{
				get { return Concrete.Url; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			#endregion
		}

		#endregion
	}
}
